import java.text.SimpleDateFormat

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://maven.fabric.io/public'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

/**
 * Tasks for the checkstyle to be executed in the sub-projects.
 */
subprojects {
    task checkstyle(type: Checkstyle) {
        configFile file("${project.rootDir}/config/quality/checkstyle/checkstyle.xml") // Where my checkstyle config is...
        configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/config/quality/checkstyle/suppressions.xml").absolutePath
        // Where is my suppressions file for checkstyle is...
        source 'src'
        include '**/*.java'
        exclude '**/gen/**'
        classpath = files()
    }

    task findbugs(type: FindBugs, dependsOn: ':app:assembleDebug') {
        description 'Run findbugs'
        group 'verification'

        excludeFilter file('../config/quality/findbugs/findbugs-filter.xml')
        classes = fileTree('build/intermediates/classes/debug/')
        source = fileTree('src/main/java/')
        classpath = files()
        effort = 'max'
    }

    task pmd(type: Pmd) {
        description 'Run pmd'
        group 'verification'

        ruleSetFiles = files('../config/quality/pmd/pmd-ruleset.xml')
        source = fileTree('src/main/java')

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

/**
 * * Method to writes into a file the releaseNotes.
 *
 */
def writeReleaseNotes(String buildType) {
    //Variables to generate the release notes of the beta distribution.

    def jobName = "Job name: " + (System.getenv("JOB_NAME") ?: "N/A")
    def buildNumber = "Build #" + (System.getenv("BUILD_NUMBER") as Integer ?: "N/A")
    def branchName = "Branch: " + getBranchName()
    def environment = "Source: " + (System.getenv("BUILD_NUMBER") as Integer ? "Jenkins Oxxus": "Local")
    def configuration = "Build type: $buildType"

    def outputFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'")
    outputFormat.timeZone = TimeZone.getTimeZone('GMT')
    def date = "Date: " + outputFormat.format(new Date())

    def commentaries = "$jobName\n$buildNumber\n$branchName\n$environment\n$configuration\n$date"

    println "Release notes builded:\n$commentaries\n"

    return commentaries
}

/**
 * Method that retrieves branch name from jenkins, or from the checked out branch
 * @return branch name
 */
def getBranchName() {

    if (System.getenv("GIT_BRANCH")) {
        return System.getenv("GIT_BRANCH");
    }

    def gitFolder = "$rootDir/.git/"
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    //def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    def isRef = head.length > 1     // ref: refs/heads/master

    if (isRef) {
        return head[1].trim() //refs/heads/master
    }

    return "N/A"
}